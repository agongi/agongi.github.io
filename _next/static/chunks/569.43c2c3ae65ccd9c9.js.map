{"version":3,"file":"static/chunks/569.43c2c3ae65ccd9c9.js","mappings":"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SAUA,CARA,GACA,MACA,IACA,YACA,YACA,QACA,GAtlBA,EAwlBA,GACA,EACA,OACA,GACA,GAEA,EA7lBA,EA6lBA,GACA,EACA,GACA,eACA,GAKA,mBACA,sBACA,CACA,UACA,QACA,KACA,CAQA,QACA,IA3ZA,EA2ZA,mBAzZA,YAFA,MA4ZA,MA1ZA,oBAEA,eACA,CAAS,EA0ZT,EA3nBA,EA2nBA,WAGA,KACA,YACA,EAhoBA,EAgoBA,EAEA,KACA,aACA,EApoBA,EAooBA,EAGA,4BAEA,UACA,CAoBA,OAlBA,EACA,UACA,OACA,EACA,EACA,MACA,eACA,GAEA,GAKA,KACA,UAGA,CACA,EAAK,EAeL,oBACA,wBAEA,cACA,EACA,KAGA,YAGA,CAAK,EAkDL,CACA,SAjDA,YACA,WACA,wBACA,QACA,aAEA,SACA,SAEA,cACA,SAEA,qBAtsBA,EAssBA,MACA,qBAtsBA,EAssBA,KACA,CACA,CAAS,CACT,EAkCA,WACA,qBACA,OACA,CAAS,CACT,QApCA,cACA,sBACA,OACA,gCAEA,YACA,YACA,EAptBA,EAotBA,EAEA,YACA,aACA,EAxtBA,EAwtBA,GAIA,QAOA,YANA,EACA,EACA,SACA,EA/tBA,EA+tBA,GAGA,oBACA,2BACA,0BACA,CAAiB,CAEjB,CAAS,CACT,EASA,SACA,OACA,CACA,EC9vBA,gBAAkD,SAAiB,yFAAsH,SAEzL,kBACA,aACA,uBACA,CAuJA,OArJA,mBACA,0CACA,0BAEA,yCACA,gBACA,YACA,eACA,4BAGA,CAFA,EAEA,qBACA,MAWA,OATA,EACA,SAEA,kCACA,6BAIA,qBACA,CACA,EAEA,WAAqB,EAAK,qBAjB1B,EAkBA,EAEA,2CACA,WAEA,YACA,YACA,gBACA,UACA,cACA,kDAEA,YACA,UACA,cAYA,EAVA,CACA,UACA,cACA,aACA,cACA,aACA,eACA,YACA,UAIA,gBAAmC,yBAAgD,EACnF,qBAA6C,YAAuB,KAGpE,uCACA,SAEA,wBACA,cACa,EAEb,MACA,EAAU,IACV,IADU,sCAGV,SAIA,KACA,YACA,iCACA,0BACA,yBAAkE,0BAClE,WAAyB,EACzB,MAD8B,IAC9B,8BAEA,YAAyC,2BA5CzC,QAgDU,MAEV,SAEA,wBACA,cACa,EAEb,GAEA,qCAEA,CAIA,qBACA,YAEA,sBAEA,EAEA,4CACA,qBACA,iBACA,EAEA,8BACA,WAEA,aACA,QACA,UACA,UACA,cACA,aACA,cACA,aACA,eACA,YACA,SACA,SACA,eACA,cACA,SACA,cACA,YACA,YACA,iBACA,+NAGA,OACY,eAAmB,uBAAyB,CACxD,CAAkB,gBAClB,UACA,EAAmB,CANnB,GAOA,EAGA,EAEA,CACA,CAAC,CAAC,WAAe,EAEjB,aACA,MAAW,WAAiB,CAAC,UAAgB,EAC7C,QAAa,aAAmB,EACxB,UAAgB,CAChB,WAAiB,CAAC,UAAgB,IAC1C,QAAa,aAAmB,EACxB,UAAgB,CAChB,WAAiB,CAAC,UAAgB,IAC1C,YAAiB,QAAc,CAC/B,WAAgB,UAAgB,CAChC,YAAiB,UAAgB,CACjC,WAAgB,aAAmB,EAC3B,UAAgB,CAChB,WAAiB,CAAC,UAAgB,IAC1C,aAAkB,UAAgB,CAClC,UAAe,UAAgB,CAC/B,OAAY,UAAgB,CAC5B,OAAY,QAAc,CAC1B,aAAkB,QAAc,CAChC,YAAiB,QAAc,CAC/B,OAAY,QAAc,CAC1B,YAAiB,QAAc,CAC/B,UAAe,QAAc,CAC7B,UAAe,UAAgB,CAC/B,SAAc,WAAiB,CAAC,WAAiB,CACjD,EAEA,gBACA,aACA,eACA,eACA,mBACA,kBACA,mBACA,kBACA,oBACA,iBACA,cACA,cACA,oBACA,mBACA,cACA,mBACA,iBACA,iBACA,eACA,gBE3LA,IAAMA,EAAoB,OAEX,SAASC,IACpB,IAAMC,EAAgBC,CAAAA,EAAAA,EAAAA,MAAAA,CAAMA,CAAiB,MACvCC,EAAgBD,CAAAA,EAAAA,EAAAA,MAAAA,CAAMA,CAAiB,MACvCE,EAAqBF,CAAAA,EAAAA,EAAAA,MAAAA,CAAMA,CAAoB,MAC/CG,EAAqBH,CAAAA,EAAAA,EAAAA,MAAAA,CAAMA,CAAoB,MAuCrD,MArCAI,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,MAENF,EAAmBG,OAAO,CAAG,GAAIC,CAAAA,GAAAA,EAAUA,EAAeD,OAAO,CAAG,CAChEE,KAAM,OACNC,SAAU,KACFL,EAAmBE,OAAO,EAAE,CAC5BF,EAAmBE,OAAO,CAACI,GAAG,CAACP,EAAmBG,OAAO,CAAEK,GAAG,IAC9DC,aAAaC,OAAO,CAACf,EAAmBgB,KAAKC,SAAS,CAACZ,EAAmBG,OAAO,CAAEK,GAAG,KAE9F,CACJ,GAEAP,EAAmBE,OAAO,CAAG,GAAIC,CAAAA,GAAAA,EAAUA,EAAeD,OAAO,CAAG,CAChEE,KAAM,MACV,GD5CM,KAA8B,CC+CpBI,aAAaI,OAAO,CAAClB,IAEjCK,EAAmBG,OAAO,CAAEI,GAAG,CAACO,EAAAA,CAFsB,CAEVA,EAG5Cd,EAAmBG,OAAO,CAAEI,GAAG,CAACI,KAAKI,KAAK,CAACN,aAAaI,OAAO,CAAClB,KAEpEM,EAAmBE,OAAO,CAACI,GAAG,CAACP,EAAmBG,OAAO,CAAEK,GAAG,IAGvD,KACCR,EAAmBG,OAAO,EAC1BH,EAAmBG,OAAO,CAACa,OAAO,GAElCf,EAAmBE,OAAO,EAAE,EACTA,OAAO,CAACa,OAAO,EAE1C,GACD,EAAE,EAGD,+BACI,WAACC,EAAKA,CAACC,SF8IQ,CE9IE,CAAXD,YAAwBE,OAAO,aAAaC,MAAO,CAACC,QAAS,OAAQC,OAAQ,QAASC,MAAO,QAASC,QAAS,MAAM,YACvH,UAACC,MAAAA,CAAIC,IAAK7B,EAAeuB,MAAO,CAACG,MAAO,MAAOD,OAAQ,MAAM,IAC7D,UAACG,MAAAA,CAAIC,IAAK3B,EAAeqB,MAAO,CAACG,MAAO,MAAOD,OAAQ,MAAM,QAI7E,mECpEO,IAAMK,EAAY,CACrBC,MAAO,IACPC,UAAW,IACXC,MAAO,IACPC,OAAQ,IACRC,mBAAoB,MACpBC,WAAY,IACZC,MAAO,IACPC,MAAO,GACPC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,UAAW,IACXC,KAAM,IACNC,iBAAkB,IAClBC,cAAe,IACfC,iBAAkB,IAClBC,kBAAmB,IACnBC,WAAY,IACZC,YAAa,IACbC,SAAU,IACd,EAAC,EAE6B,MAAK,EACP,CAAC,EAAC,gBCd9B,UAAmB,EAAQ,IAA4B,aAA7B,gCER1B,MAA2B,EAAQ,IAA4B,EAE/D,WAFkC,EAElC,CACA,cACA,sBAEA,qBACA,wBACA,UAIA,YACA,kLAKA,OADA,6BACA,EACA,CAEA,aACA,QACA,CAHA,eAMA,OACA,QACA,SACA,OACA,OACA,SACA,SACA,SACA,SAEA,MACA,UACA,UACA,cACA,aACA,OACA,WACA,QACA,YACA,QACA,QAEA,iBACA,mBACA,EAIA,OAFA,cAEA,CACA","sources":["webpack://_N_E/../../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack://_N_E/../../../node_modules/.pnpm/split.js@1.6.5/node_modules/split.js/dist/split.es.js","webpack://_N_E/../../../node_modules/.pnpm/react-split@2.0.14_react@19.1.1/node_modules/react-split/dist/react-split.es.js","webpack://_N_E/../../../node_modules/.pnpm/remeda@2.27.2/node_modules/remeda/dist/chunk-JK3VNB42.js","webpack://_N_E/./app/json/JsonEditor.tsx","webpack://_N_E/../common/constant/Constant.tsx","webpack://_N_E/../../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/index.js","webpack://_N_E/../../../node_modules/.pnpm/jsoneditor@10.3.0/node_modules/jsoneditor/dist/jsoneditor.min.css","webpack://_N_E/../../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/factoryWithThrowingShims.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","// The programming goals of Split.js are to deliver readable, understandable and\n// maintainable code, while at the same time manually optimizing for tiny minified file size,\n// browser compatibility without additional requirements\n// and very few assumptions about the user's page layout.\nvar global = typeof window !== 'undefined' ? window : null;\nvar ssr = global === null;\nvar document = !ssr ? global.document : undefined;\n\n// Save a couple long function names that are used frequently.\n// This optimization saves around 400 bytes.\nvar addEventListener = 'addEventListener';\nvar removeEventListener = 'removeEventListener';\nvar getBoundingClientRect = 'getBoundingClientRect';\nvar gutterStartDragging = '_a';\nvar aGutterSize = '_b';\nvar bGutterSize = '_c';\nvar HORIZONTAL = 'horizontal';\nvar NOOP = function () { return false; };\n\n// Helper function determines which prefixes of CSS calc we need.\n// We only need to do this once on startup, when this anonymous function is called.\n//\n// Tests -webkit, -moz and -o prefixes. Modified from StackOverflow:\n// http://stackoverflow.com/questions/16625140/js-feature-detection-to-detect-the-usage-of-webkit-calc-over-calc/16625167#16625167\nvar calc = ssr\n    ? 'calc'\n    : ((['', '-webkit-', '-moz-', '-o-']\n          .filter(function (prefix) {\n              var el = document.createElement('div');\n              el.style.cssText = \"width:\" + prefix + \"calc(9px)\";\n\n              return !!el.style.length\n          })\n          .shift()) + \"calc\");\n\n// Helper function checks if its argument is a string-like type\nvar isString = function (v) { return typeof v === 'string' || v instanceof String; };\n\n// Helper function allows elements and string selectors to be used\n// interchangeably. In either case an element is returned. This allows us to\n// do `Split([elem1, elem2])` as well as `Split(['#id1', '#id2'])`.\nvar elementOrSelector = function (el) {\n    if (isString(el)) {\n        var ele = document.querySelector(el);\n        if (!ele) {\n            throw new Error((\"Selector \" + el + \" did not match a DOM element\"))\n        }\n        return ele\n    }\n\n    return el\n};\n\n// Helper function gets a property from the properties object, with a default fallback\nvar getOption = function (options, propName, def) {\n    var value = options[propName];\n    if (value !== undefined) {\n        return value\n    }\n    return def\n};\n\nvar getGutterSize = function (gutterSize, isFirst, isLast, gutterAlign) {\n    if (isFirst) {\n        if (gutterAlign === 'end') {\n            return 0\n        }\n        if (gutterAlign === 'center') {\n            return gutterSize / 2\n        }\n    } else if (isLast) {\n        if (gutterAlign === 'start') {\n            return 0\n        }\n        if (gutterAlign === 'center') {\n            return gutterSize / 2\n        }\n    }\n\n    return gutterSize\n};\n\n// Default options\nvar defaultGutterFn = function (i, gutterDirection) {\n    var gut = document.createElement('div');\n    gut.className = \"gutter gutter-\" + gutterDirection;\n    return gut\n};\n\nvar defaultElementStyleFn = function (dim, size, gutSize) {\n    var style = {};\n\n    if (!isString(size)) {\n        style[dim] = calc + \"(\" + size + \"% - \" + gutSize + \"px)\";\n    } else {\n        style[dim] = size;\n    }\n\n    return style\n};\n\nvar defaultGutterStyleFn = function (dim, gutSize) {\n    var obj;\n\n    return (( obj = {}, obj[dim] = (gutSize + \"px\"), obj ));\n};\n\n// The main function to initialize a split. Split.js thinks about each pair\n// of elements as an independant pair. Dragging the gutter between two elements\n// only changes the dimensions of elements in that pair. This is key to understanding\n// how the following functions operate, since each function is bound to a pair.\n//\n// A pair object is shaped like this:\n//\n// {\n//     a: DOM element,\n//     b: DOM element,\n//     aMin: Number,\n//     bMin: Number,\n//     dragging: Boolean,\n//     parent: DOM element,\n//     direction: 'horizontal' | 'vertical'\n// }\n//\n// The basic sequence:\n//\n// 1. Set defaults to something sane. `options` doesn't have to be passed at all.\n// 2. Initialize a bunch of strings based on the direction we're splitting.\n//    A lot of the behavior in the rest of the library is paramatized down to\n//    rely on CSS strings and classes.\n// 3. Define the dragging helper functions, and a few helpers to go with them.\n// 4. Loop through the elements while pairing them off. Every pair gets an\n//    `pair` object and a gutter.\n// 5. Actually size the pair elements, insert gutters and attach event listeners.\nvar Split = function (idsOption, options) {\n    if ( options === void 0 ) options = {};\n\n    if (ssr) { return {} }\n\n    var ids = idsOption;\n    var dimension;\n    var clientAxis;\n    var position;\n    var positionEnd;\n    var clientSize;\n    var elements;\n\n    // Allow HTMLCollection to be used as an argument when supported\n    if (Array.from) {\n        ids = Array.from(ids);\n    }\n\n    // All DOM elements in the split should have a common parent. We can grab\n    // the first elements parent and hope users read the docs because the\n    // behavior will be whacky otherwise.\n    var firstElement = elementOrSelector(ids[0]);\n    var parent = firstElement.parentNode;\n    var parentStyle = getComputedStyle ? getComputedStyle(parent) : null;\n    var parentFlexDirection = parentStyle ? parentStyle.flexDirection : null;\n\n    // Set default options.sizes to equal percentages of the parent element.\n    var sizes = getOption(options, 'sizes') || ids.map(function () { return 100 / ids.length; });\n\n    // Standardize minSize and maxSize to an array if it isn't already.\n    // This allows minSize and maxSize to be passed as a number.\n    var minSize = getOption(options, 'minSize', 100);\n    var minSizes = Array.isArray(minSize) ? minSize : ids.map(function () { return minSize; });\n    var maxSize = getOption(options, 'maxSize', Infinity);\n    var maxSizes = Array.isArray(maxSize) ? maxSize : ids.map(function () { return maxSize; });\n\n    // Get other options\n    var expandToMin = getOption(options, 'expandToMin', false);\n    var gutterSize = getOption(options, 'gutterSize', 10);\n    var gutterAlign = getOption(options, 'gutterAlign', 'center');\n    var snapOffset = getOption(options, 'snapOffset', 30);\n    var snapOffsets = Array.isArray(snapOffset) ? snapOffset : ids.map(function () { return snapOffset; });\n    var dragInterval = getOption(options, 'dragInterval', 1);\n    var direction = getOption(options, 'direction', HORIZONTAL);\n    var cursor = getOption(\n        options,\n        'cursor',\n        direction === HORIZONTAL ? 'col-resize' : 'row-resize'\n    );\n    var gutter = getOption(options, 'gutter', defaultGutterFn);\n    var elementStyle = getOption(\n        options,\n        'elementStyle',\n        defaultElementStyleFn\n    );\n    var gutterStyle = getOption(options, 'gutterStyle', defaultGutterStyleFn);\n\n    // 2. Initialize a bunch of strings based on the direction we're splitting.\n    // A lot of the behavior in the rest of the library is paramatized down to\n    // rely on CSS strings and classes.\n    if (direction === HORIZONTAL) {\n        dimension = 'width';\n        clientAxis = 'clientX';\n        position = 'left';\n        positionEnd = 'right';\n        clientSize = 'clientWidth';\n    } else if (direction === 'vertical') {\n        dimension = 'height';\n        clientAxis = 'clientY';\n        position = 'top';\n        positionEnd = 'bottom';\n        clientSize = 'clientHeight';\n    }\n\n    // 3. Define the dragging helper functions, and a few helpers to go with them.\n    // Each helper is bound to a pair object that contains its metadata. This\n    // also makes it easy to store references to listeners that that will be\n    // added and removed.\n    //\n    // Even though there are no other functions contained in them, aliasing\n    // this to self saves 50 bytes or so since it's used so frequently.\n    //\n    // The pair object saves metadata like dragging state, position and\n    // event listener references.\n\n    function setElementSize(el, size, gutSize, i) {\n        // Split.js allows setting sizes via numbers (ideally), or if you must,\n        // by string, like '300px'. This is less than ideal, because it breaks\n        // the fluid layout that `calc(% - px)` provides. You're on your own if you do that,\n        // make sure you calculate the gutter size by hand.\n        var style = elementStyle(dimension, size, gutSize, i);\n\n        Object.keys(style).forEach(function (prop) {\n            // eslint-disable-next-line no-param-reassign\n            el.style[prop] = style[prop];\n        });\n    }\n\n    function setGutterSize(gutterElement, gutSize, i) {\n        var style = gutterStyle(dimension, gutSize, i);\n\n        Object.keys(style).forEach(function (prop) {\n            // eslint-disable-next-line no-param-reassign\n            gutterElement.style[prop] = style[prop];\n        });\n    }\n\n    function getSizes() {\n        return elements.map(function (element) { return element.size; })\n    }\n\n    // Supports touch events, but not multitouch, so only the first\n    // finger `touches[0]` is counted.\n    function getMousePosition(e) {\n        if ('touches' in e) { return e.touches[0][clientAxis] }\n        return e[clientAxis]\n    }\n\n    // Actually adjust the size of elements `a` and `b` to `offset` while dragging.\n    // calc is used to allow calc(percentage + gutterpx) on the whole split instance,\n    // which allows the viewport to be resized without additional logic.\n    // Element a's size is the same as offset. b's size is total size - a size.\n    // Both sizes are calculated from the initial parent percentage,\n    // then the gutter size is subtracted.\n    function adjust(offset) {\n        var a = elements[this.a];\n        var b = elements[this.b];\n        var percentage = a.size + b.size;\n\n        a.size = (offset / this.size) * percentage;\n        b.size = percentage - (offset / this.size) * percentage;\n\n        setElementSize(a.element, a.size, this[aGutterSize], a.i);\n        setElementSize(b.element, b.size, this[bGutterSize], b.i);\n    }\n\n    // drag, where all the magic happens. The logic is really quite simple:\n    //\n    // 1. Ignore if the pair is not dragging.\n    // 2. Get the offset of the event.\n    // 3. Snap offset to min if within snappable range (within min + snapOffset).\n    // 4. Actually adjust each element in the pair to offset.\n    //\n    // ---------------------------------------------------------------------\n    // |    | <- a.minSize               ||              b.minSize -> |    |\n    // |    |  | <- this.snapOffset      ||     this.snapOffset -> |  |    |\n    // |    |  |                         ||                        |  |    |\n    // |    |  |                         ||                        |  |    |\n    // ---------------------------------------------------------------------\n    // | <- this.start                                        this.size -> |\n    function drag(e) {\n        var offset;\n        var a = elements[this.a];\n        var b = elements[this.b];\n\n        if (!this.dragging) { return }\n\n        // Get the offset of the event from the first side of the\n        // pair `this.start`. Then offset by the initial position of the\n        // mouse compared to the gutter size.\n        offset =\n            getMousePosition(e) -\n            this.start +\n            (this[aGutterSize] - this.dragOffset);\n\n        if (dragInterval > 1) {\n            offset = Math.round(offset / dragInterval) * dragInterval;\n        }\n\n        // If within snapOffset of min or max, set offset to min or max.\n        // snapOffset buffers a.minSize and b.minSize, so logic is opposite for both.\n        // Include the appropriate gutter sizes to prevent overflows.\n        if (offset <= a.minSize + a.snapOffset + this[aGutterSize]) {\n            offset = a.minSize + this[aGutterSize];\n        } else if (\n            offset >=\n            this.size - (b.minSize + b.snapOffset + this[bGutterSize])\n        ) {\n            offset = this.size - (b.minSize + this[bGutterSize]);\n        }\n\n        if (offset >= a.maxSize - a.snapOffset + this[aGutterSize]) {\n            offset = a.maxSize + this[aGutterSize];\n        } else if (\n            offset <=\n            this.size - (b.maxSize - b.snapOffset + this[bGutterSize])\n        ) {\n            offset = this.size - (b.maxSize + this[bGutterSize]);\n        }\n\n        // Actually adjust the size.\n        adjust.call(this, offset);\n\n        // Call the drag callback continously. Don't do anything too intensive\n        // in this callback.\n        getOption(options, 'onDrag', NOOP)(getSizes());\n    }\n\n    // Cache some important sizes when drag starts, so we don't have to do that\n    // continously:\n    //\n    // `size`: The total size of the pair. First + second + first gutter + second gutter.\n    // `start`: The leading side of the first element.\n    //\n    // ------------------------------------------------\n    // |      aGutterSize -> |||                      |\n    // |                     |||                      |\n    // |                     |||                      |\n    // |                     ||| <- bGutterSize       |\n    // ------------------------------------------------\n    // | <- start                             size -> |\n    function calculateSizes() {\n        // Figure out the parent size minus padding.\n        var a = elements[this.a].element;\n        var b = elements[this.b].element;\n\n        var aBounds = a[getBoundingClientRect]();\n        var bBounds = b[getBoundingClientRect]();\n\n        this.size =\n            aBounds[dimension] +\n            bBounds[dimension] +\n            this[aGutterSize] +\n            this[bGutterSize];\n        this.start = aBounds[position];\n        this.end = aBounds[positionEnd];\n    }\n\n    function innerSize(element) {\n        // Return nothing if getComputedStyle is not supported (< IE9)\n        // Or if parent element has no layout yet\n        if (!getComputedStyle) { return null }\n\n        var computedStyle = getComputedStyle(element);\n\n        if (!computedStyle) { return null }\n\n        var size = element[clientSize];\n\n        if (size === 0) { return null }\n\n        if (direction === HORIZONTAL) {\n            size -=\n                parseFloat(computedStyle.paddingLeft) +\n                parseFloat(computedStyle.paddingRight);\n        } else {\n            size -=\n                parseFloat(computedStyle.paddingTop) +\n                parseFloat(computedStyle.paddingBottom);\n        }\n\n        return size\n    }\n\n    // When specifying percentage sizes that are less than the computed\n    // size of the element minus the gutter, the lesser percentages must be increased\n    // (and decreased from the other elements) to make space for the pixels\n    // subtracted by the gutters.\n    function trimToMin(sizesToTrim) {\n        // Try to get inner size of parent element.\n        // If it's no supported, return original sizes.\n        var parentSize = innerSize(parent);\n        if (parentSize === null) {\n            return sizesToTrim\n        }\n\n        if (minSizes.reduce(function (a, b) { return a + b; }, 0) > parentSize) {\n            return sizesToTrim\n        }\n\n        // Keep track of the excess pixels, the amount of pixels over the desired percentage\n        // Also keep track of the elements with pixels to spare, to decrease after if needed\n        var excessPixels = 0;\n        var toSpare = [];\n\n        var pixelSizes = sizesToTrim.map(function (size, i) {\n            // Convert requested percentages to pixel sizes\n            var pixelSize = (parentSize * size) / 100;\n            var elementGutterSize = getGutterSize(\n                gutterSize,\n                i === 0,\n                i === sizesToTrim.length - 1,\n                gutterAlign\n            );\n            var elementMinSize = minSizes[i] + elementGutterSize;\n\n            // If element is too smal, increase excess pixels by the difference\n            // and mark that it has no pixels to spare\n            if (pixelSize < elementMinSize) {\n                excessPixels += elementMinSize - pixelSize;\n                toSpare.push(0);\n                return elementMinSize\n            }\n\n            // Otherwise, mark the pixels it has to spare and return it's original size\n            toSpare.push(pixelSize - elementMinSize);\n            return pixelSize\n        });\n\n        // If nothing was adjusted, return the original sizes\n        if (excessPixels === 0) {\n            return sizesToTrim\n        }\n\n        return pixelSizes.map(function (pixelSize, i) {\n            var newPixelSize = pixelSize;\n\n            // While there's still pixels to take, and there's enough pixels to spare,\n            // take as many as possible up to the total excess pixels\n            if (excessPixels > 0 && toSpare[i] - excessPixels > 0) {\n                var takenPixels = Math.min(\n                    excessPixels,\n                    toSpare[i] - excessPixels\n                );\n\n                // Subtract the amount taken for the next iteration\n                excessPixels -= takenPixels;\n                newPixelSize = pixelSize - takenPixels;\n            }\n\n            // Return the pixel size adjusted as a percentage\n            return (newPixelSize / parentSize) * 100\n        })\n    }\n\n    // stopDragging is very similar to startDragging in reverse.\n    function stopDragging() {\n        var self = this;\n        var a = elements[self.a].element;\n        var b = elements[self.b].element;\n\n        if (self.dragging) {\n            getOption(options, 'onDragEnd', NOOP)(getSizes());\n        }\n\n        self.dragging = false;\n\n        // Remove the stored event listeners. This is why we store them.\n        global[removeEventListener]('mouseup', self.stop);\n        global[removeEventListener]('touchend', self.stop);\n        global[removeEventListener]('touchcancel', self.stop);\n        global[removeEventListener]('mousemove', self.move);\n        global[removeEventListener]('touchmove', self.move);\n\n        // Clear bound function references\n        self.stop = null;\n        self.move = null;\n\n        a[removeEventListener]('selectstart', NOOP);\n        a[removeEventListener]('dragstart', NOOP);\n        b[removeEventListener]('selectstart', NOOP);\n        b[removeEventListener]('dragstart', NOOP);\n\n        a.style.userSelect = '';\n        a.style.webkitUserSelect = '';\n        a.style.MozUserSelect = '';\n        a.style.pointerEvents = '';\n\n        b.style.userSelect = '';\n        b.style.webkitUserSelect = '';\n        b.style.MozUserSelect = '';\n        b.style.pointerEvents = '';\n\n        self.gutter.style.cursor = '';\n        self.parent.style.cursor = '';\n        document.body.style.cursor = '';\n    }\n\n    // startDragging calls `calculateSizes` to store the inital size in the pair object.\n    // It also adds event listeners for mouse/touch events,\n    // and prevents selection while dragging so avoid the selecting text.\n    function startDragging(e) {\n        // Right-clicking can't start dragging.\n        if ('button' in e && e.button !== 0) {\n            return\n        }\n\n        // Alias frequently used variables to save space. 200 bytes.\n        var self = this;\n        var a = elements[self.a].element;\n        var b = elements[self.b].element;\n\n        // Call the onDragStart callback.\n        if (!self.dragging) {\n            getOption(options, 'onDragStart', NOOP)(getSizes());\n        }\n\n        // Don't actually drag the element. We emulate that in the drag function.\n        e.preventDefault();\n\n        // Set the dragging property of the pair object.\n        self.dragging = true;\n\n        // Create two event listeners bound to the same pair object and store\n        // them in the pair object.\n        self.move = drag.bind(self);\n        self.stop = stopDragging.bind(self);\n\n        // All the binding. `window` gets the stop events in case we drag out of the elements.\n        global[addEventListener]('mouseup', self.stop);\n        global[addEventListener]('touchend', self.stop);\n        global[addEventListener]('touchcancel', self.stop);\n        global[addEventListener]('mousemove', self.move);\n        global[addEventListener]('touchmove', self.move);\n\n        // Disable selection. Disable!\n        a[addEventListener]('selectstart', NOOP);\n        a[addEventListener]('dragstart', NOOP);\n        b[addEventListener]('selectstart', NOOP);\n        b[addEventListener]('dragstart', NOOP);\n\n        a.style.userSelect = 'none';\n        a.style.webkitUserSelect = 'none';\n        a.style.MozUserSelect = 'none';\n        a.style.pointerEvents = 'none';\n\n        b.style.userSelect = 'none';\n        b.style.webkitUserSelect = 'none';\n        b.style.MozUserSelect = 'none';\n        b.style.pointerEvents = 'none';\n\n        // Set the cursor at multiple levels\n        self.gutter.style.cursor = cursor;\n        self.parent.style.cursor = cursor;\n        document.body.style.cursor = cursor;\n\n        // Cache the initial sizes of the pair.\n        calculateSizes.call(self);\n\n        // Determine the position of the mouse compared to the gutter\n        self.dragOffset = getMousePosition(e) - self.end;\n    }\n\n    // adjust sizes to ensure percentage is within min size and gutter.\n    sizes = trimToMin(sizes);\n\n    // 5. Create pair and element objects. Each pair has an index reference to\n    // elements `a` and `b` of the pair (first and second elements).\n    // Loop through the elements while pairing them off. Every pair gets a\n    // `pair` object and a gutter.\n    //\n    // Basic logic:\n    //\n    // - Starting with the second element `i > 0`, create `pair` objects with\n    //   `a = i - 1` and `b = i`\n    // - Set gutter sizes based on the _pair_ being first/last. The first and last\n    //   pair have gutterSize / 2, since they only have one half gutter, and not two.\n    // - Create gutter elements and add event listeners.\n    // - Set the size of the elements, minus the gutter sizes.\n    //\n    // -----------------------------------------------------------------------\n    // |     i=0     |         i=1         |        i=2       |      i=3     |\n    // |             |                     |                  |              |\n    // |           pair 0                pair 1             pair 2           |\n    // |             |                     |                  |              |\n    // -----------------------------------------------------------------------\n    var pairs = [];\n    elements = ids.map(function (id, i) {\n        // Create the element object.\n        var element = {\n            element: elementOrSelector(id),\n            size: sizes[i],\n            minSize: minSizes[i],\n            maxSize: maxSizes[i],\n            snapOffset: snapOffsets[i],\n            i: i,\n        };\n\n        var pair;\n\n        if (i > 0) {\n            // Create the pair object with its metadata.\n            pair = {\n                a: i - 1,\n                b: i,\n                dragging: false,\n                direction: direction,\n                parent: parent,\n            };\n\n            pair[aGutterSize] = getGutterSize(\n                gutterSize,\n                i - 1 === 0,\n                false,\n                gutterAlign\n            );\n            pair[bGutterSize] = getGutterSize(\n                gutterSize,\n                false,\n                i === ids.length - 1,\n                gutterAlign\n            );\n\n            // if the parent has a reverse flex-direction, switch the pair elements.\n            if (\n                parentFlexDirection === 'row-reverse' ||\n                parentFlexDirection === 'column-reverse'\n            ) {\n                var temp = pair.a;\n                pair.a = pair.b;\n                pair.b = temp;\n            }\n        }\n\n        // Determine the size of the current element. IE8 is supported by\n        // staticly assigning sizes without draggable gutters. Assigns a string\n        // to `size`.\n        //\n        // Create gutter elements for each pair.\n        if (i > 0) {\n            var gutterElement = gutter(i, direction, element.element);\n            setGutterSize(gutterElement, gutterSize, i);\n\n            // Save bound event listener for removal later\n            pair[gutterStartDragging] = startDragging.bind(pair);\n\n            // Attach bound event listener\n            gutterElement[addEventListener](\n                'mousedown',\n                pair[gutterStartDragging]\n            );\n            gutterElement[addEventListener](\n                'touchstart',\n                pair[gutterStartDragging]\n            );\n\n            parent.insertBefore(gutterElement, element.element);\n\n            pair.gutter = gutterElement;\n        }\n\n        setElementSize(\n            element.element,\n            element.size,\n            getGutterSize(\n                gutterSize,\n                i === 0,\n                i === ids.length - 1,\n                gutterAlign\n            ),\n            i\n        );\n\n        // After the first iteration, and we have a pair object, append it to the\n        // list of pairs.\n        if (i > 0) {\n            pairs.push(pair);\n        }\n\n        return element\n    });\n\n    function adjustToMin(element) {\n        var isLast = element.i === pairs.length;\n        var pair = isLast ? pairs[element.i - 1] : pairs[element.i];\n\n        calculateSizes.call(pair);\n\n        var size = isLast\n            ? pair.size - element.minSize - pair[bGutterSize]\n            : element.minSize + pair[aGutterSize];\n\n        adjust.call(pair, size);\n    }\n\n    elements.forEach(function (element) {\n        var computedSize = element.element[getBoundingClientRect]()[dimension];\n\n        if (computedSize < element.minSize) {\n            if (expandToMin) {\n                adjustToMin(element);\n            } else {\n                // eslint-disable-next-line no-param-reassign\n                element.minSize = computedSize;\n            }\n        }\n    });\n\n    function setSizes(newSizes) {\n        var trimmed = trimToMin(newSizes);\n        trimmed.forEach(function (newSize, i) {\n            if (i > 0) {\n                var pair = pairs[i - 1];\n\n                var a = elements[pair.a];\n                var b = elements[pair.b];\n\n                a.size = trimmed[i - 1];\n                b.size = newSize;\n\n                setElementSize(a.element, a.size, pair[aGutterSize], a.i);\n                setElementSize(b.element, b.size, pair[bGutterSize], b.i);\n            }\n        });\n    }\n\n    function destroy(preserveStyles, preserveGutter) {\n        pairs.forEach(function (pair) {\n            if (preserveGutter !== true) {\n                pair.parent.removeChild(pair.gutter);\n            } else {\n                pair.gutter[removeEventListener](\n                    'mousedown',\n                    pair[gutterStartDragging]\n                );\n                pair.gutter[removeEventListener](\n                    'touchstart',\n                    pair[gutterStartDragging]\n                );\n            }\n\n            if (preserveStyles !== true) {\n                var style = elementStyle(\n                    dimension,\n                    pair.a.size,\n                    pair[aGutterSize]\n                );\n\n                Object.keys(style).forEach(function (prop) {\n                    elements[pair.a].element.style[prop] = '';\n                    elements[pair.b].element.style[prop] = '';\n                });\n            }\n        });\n    }\n\n    return {\n        setSizes: setSizes,\n        getSizes: getSizes,\n        collapse: function collapse(i) {\n            adjustToMin(elements[i]);\n        },\n        destroy: destroy,\n        parent: parent,\n        pairs: pairs,\n    }\n};\n\nexport default Split;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Split from 'split.js';\n\nfunction objectWithoutProperties (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }\n\nvar SplitWrapper = /*@__PURE__*/(function (superclass) {\n    function SplitWrapper () {\n        superclass.apply(this, arguments);\n    }\n\n    if ( superclass ) SplitWrapper.__proto__ = superclass;\n    SplitWrapper.prototype = Object.create( superclass && superclass.prototype );\n    SplitWrapper.prototype.constructor = SplitWrapper;\n\n    SplitWrapper.prototype.componentDidMount = function componentDidMount () {\n        var ref = this.props;\n        ref.children;\n        var gutter = ref.gutter;\n        var rest = objectWithoutProperties( ref, [\"children\", \"gutter\"] );\n        var options = rest;\n\n        options.gutter = function (index, direction) {\n            var gutterElement;\n\n            if (gutter) {\n                gutterElement = gutter(index, direction);\n            } else {\n                gutterElement = document.createElement('div');\n                gutterElement.className = \"gutter gutter-\" + direction;\n            }\n\n            // eslint-disable-next-line no-underscore-dangle\n            gutterElement.__isSplitGutter = true;\n            return gutterElement\n        };\n\n        this.split = Split(this.parent.children, options);\n    };\n\n    SplitWrapper.prototype.componentDidUpdate = function componentDidUpdate (prevProps) {\n        var this$1 = this;\n\n        var ref = this.props;\n        ref.children;\n        var minSize = ref.minSize;\n        var sizes = ref.sizes;\n        var collapsed = ref.collapsed;\n        var rest = objectWithoutProperties( ref, [\"children\", \"minSize\", \"sizes\", \"collapsed\"] );\n        var options = rest;\n        var prevMinSize = prevProps.minSize;\n        var prevSizes = prevProps.sizes;\n        var prevCollapsed = prevProps.collapsed;\n\n        var otherProps = [\n            'maxSize',\n            'expandToMin',\n            'gutterSize',\n            'gutterAlign',\n            'snapOffset',\n            'dragInterval',\n            'direction',\n            'cursor' ];\n\n        var needsRecreate = otherProps\n            // eslint-disable-next-line react/destructuring-assignment\n            .map(function (prop) { return this$1.props[prop] !== prevProps[prop]; })\n            .reduce(function (accum, same) { return accum || same; }, false);\n\n        // Compare minSize when both are arrays, when one is an array and when neither is an array\n        if (Array.isArray(minSize) && Array.isArray(prevMinSize)) {\n            var minSizeChanged = false;\n\n            minSize.forEach(function (minSizeI, i) {\n                minSizeChanged = minSizeChanged || minSizeI !== prevMinSize[i];\n            });\n\n            needsRecreate = needsRecreate || minSizeChanged;\n        } else if (Array.isArray(minSize) || Array.isArray(prevMinSize)) {\n            needsRecreate = true;\n        } else {\n            needsRecreate = needsRecreate || minSize !== prevMinSize;\n        }\n\n        // Destroy and re-create split if options changed\n        if (needsRecreate) {\n            options.minSize = minSize;\n            options.sizes = sizes || this.split.getSizes();\n            this.split.destroy(true, true);\n            options.gutter = function (index, direction, pairB) { return pairB.previousSibling; };\n            this.split = Split(\n                Array.from(this.parent.children).filter(\n                    // eslint-disable-next-line no-underscore-dangle\n                    function (element) { return !element.__isSplitGutter; }\n                ),\n                options\n            );\n        } else if (sizes) {\n            // If only the size has changed, set the size. No need to do this if re-created.\n            var sizeChanged = false;\n\n            sizes.forEach(function (sizeI, i) {\n                sizeChanged = sizeChanged || sizeI !== prevSizes[i];\n            });\n\n            if (sizeChanged) {\n                // eslint-disable-next-line react/destructuring-assignment\n                this.split.setSizes(this.props.sizes);\n            }\n        }\n\n        // Collapse after re-created or when collapsed changed.\n        if (\n            Number.isInteger(collapsed) &&\n            (collapsed !== prevCollapsed || needsRecreate)\n        ) {\n            this.split.collapse(collapsed);\n        }\n    };\n\n    SplitWrapper.prototype.componentWillUnmount = function componentWillUnmount () {\n        this.split.destroy();\n        delete this.split;\n    };\n\n    SplitWrapper.prototype.render = function render () {\n        var this$1 = this;\n\n        var ref = this.props;\n        ref.sizes;\n        ref.minSize;\n        ref.maxSize;\n        ref.expandToMin;\n        ref.gutterSize;\n        ref.gutterAlign;\n        ref.snapOffset;\n        ref.dragInterval;\n        ref.direction;\n        ref.cursor;\n        ref.gutter;\n        ref.elementStyle;\n        ref.gutterStyle;\n        ref.onDrag;\n        ref.onDragStart;\n        ref.onDragEnd;\n        ref.collapsed;\n        var children = ref.children;\n        var rest$1 = objectWithoutProperties( ref, [\"sizes\", \"minSize\", \"maxSize\", \"expandToMin\", \"gutterSize\", \"gutterAlign\", \"snapOffset\", \"dragInterval\", \"direction\", \"cursor\", \"gutter\", \"elementStyle\", \"gutterStyle\", \"onDrag\", \"onDragStart\", \"onDragEnd\", \"collapsed\", \"children\"] );\n        var rest = rest$1;\n\n        return (\n            React.createElement( 'div', Object.assign({},\n                { ref: function (parent) {\n                    this$1.parent = parent;\n                } }, rest),\n                children\n            )\n        )\n    };\n\n    return SplitWrapper;\n}(React.Component));\n\nSplitWrapper.propTypes = {\n    sizes: PropTypes.arrayOf(PropTypes.number),\n    minSize: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(PropTypes.number) ]),\n    maxSize: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(PropTypes.number) ]),\n    expandToMin: PropTypes.bool,\n    gutterSize: PropTypes.number,\n    gutterAlign: PropTypes.string,\n    snapOffset: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(PropTypes.number) ]),\n    dragInterval: PropTypes.number,\n    direction: PropTypes.string,\n    cursor: PropTypes.string,\n    gutter: PropTypes.func,\n    elementStyle: PropTypes.func,\n    gutterStyle: PropTypes.func,\n    onDrag: PropTypes.func,\n    onDragStart: PropTypes.func,\n    onDragEnd: PropTypes.func,\n    collapsed: PropTypes.number,\n    children: PropTypes.arrayOf(PropTypes.element),\n};\n\nSplitWrapper.defaultProps = {\n    sizes: undefined,\n    minSize: undefined,\n    maxSize: undefined,\n    expandToMin: undefined,\n    gutterSize: undefined,\n    gutterAlign: undefined,\n    snapOffset: undefined,\n    dragInterval: undefined,\n    direction: undefined,\n    cursor: undefined,\n    gutter: undefined,\n    elementStyle: undefined,\n    gutterStyle: undefined,\n    onDrag: undefined,\n    onDragStart: undefined,\n    onDragEnd: undefined,\n    collapsed: undefined,\n    children: undefined,\n};\n\nexport default SplitWrapper;\n","function n(e){return e==null}export{n as a};\n","/*\n *  @(#)JsonEditor.tsx 2024.10.14\n *\n *  Copyright 2024 CKP Corp. All rights Reserved.\n *  CKP PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n */\n\n'use client'\n\nimport {useEffect, useRef} from 'react'\nimport 'jsoneditor/dist/jsoneditor.min.css'\nimport JSONEditor from 'jsoneditor'\nimport Split from 'react-split'\nimport * as R from 'remeda'\nimport {EMPTY_OBJECT} from '@nyx/kr-common/constant/Constant'\n\n/**\n * https://github.com/josdejong/jsoneditor\n * https://github.com/josdejong/jsoneditor/tree/master/examples\n * https://github.com/webpatch/JSON-Editor-Extension\n */\n\nconst LOCAL_STORAGE_KEY = 'JSON'\n\nexport default function JsonEditor() {\n    const codeEditorRef = useRef<HTMLDivElement>(null)\n    const viewEditorRef = useRef<HTMLDivElement>(null)\n    const codeEditorInstance = useRef<JSONEditor | null>(null)\n    const viewEditorInstance = useRef<JSONEditor | null>(null)\n\n    useEffect(() => {\n        // left code editor\n        codeEditorInstance.current = new JSONEditor(codeEditorRef.current!, {\n            mode: 'code',\n            onChange: () => {\n                if (viewEditorInstance.current) {\n                    viewEditorInstance.current.set(codeEditorInstance.current!.get())\n                    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(codeEditorInstance.current!.get()))\n                }\n            }\n        })\n        // right view editor\n        viewEditorInstance.current = new JSONEditor(viewEditorRef.current!, {\n            mode: 'tree'\n        })\n\n        // 초기값 세팅\n        if (R.isNullish(localStorage.getItem(LOCAL_STORAGE_KEY))) {\n            // localStorage 미존재 -> {} 으로 초기화\n            codeEditorInstance.current!.set(EMPTY_OBJECT)\n        } else {\n            // localStorage 존재 -> 기존값 사용\n            codeEditorInstance.current!.set(JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)!))\n        }\n        viewEditorInstance.current.set(codeEditorInstance.current!.get())\n\n        // destructor\n        return () => {\n            if (codeEditorInstance.current) {\n                codeEditorInstance.current.destroy()\n            }\n            if (viewEditorInstance.current) {\n                viewEditorInstance.current.destroy()\n            }\n        }\n    }, [])\n\n    return (\n        <>\n            <Split direction=\"horizontal\" cursor=\"col-resize\" style={{display: 'flex', height: '100vh', width: '100vw', padding: '10px'}}>\n                <div ref={codeEditorRef} style={{width: '50%', height: '100%'}}></div>\n                <div ref={viewEditorRef} style={{width: '50%', height: '100%'}}></div>\n            </Split>\n        </>\n    )\n}","/*\n *  @(#)Constant.tsx 2024.09.30\n *\n *  Copyright 2024 CKP Corp. All rights Reserved.\n *  CKP PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n */\n\nexport const Delimiter = {\n    COLON: ':',\n    SEMICOLON: ';',\n    COMMA: ',',\n    HYPHEN: '-',\n    SPACE_HYPHEN_SPACE: ' - ',\n    UNDERSCORE: '_',\n    SPACE: ' ',\n    EMPTY: '',\n    PIPE: '|',\n    SLASH: '/',\n    EQUALS: '=',\n    AMPERSAND: '&',\n    PLUS: '+',\n    EXCLAMATION_MARK: '!',\n    QUESTION_MARK: '?',\n    OPEN_PARENTHESIS: '(',\n    CLOSE_PARENTHESIS: ')',\n    OPEN_BRACE: '{',\n    CLOSE_BRACE: '}',\n    NEW_LINE: '\\n',\n}\n\nexport const NOT_APPLICABLE = 'N/A'\nexport const EMPTY_OBJECT = {}\nexport const EMPTY_ARRAY = []\nexport const NULL = null    // 명시적인 없음 표현 (== empty)\nexport const UNDEFINED = undefined  // JAVA 에서의 null 표현 (== null)","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","// extracted by mini-css-extract-plugin","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n"],"names":["LOCAL_STORAGE_KEY","JsonEditor","codeEditorRef","useRef","viewEditorRef","codeEditorInstance","viewEditorInstance","useEffect","current","JSONEditor","mode","onChange","set","get","localStorage","setItem","JSON","stringify","getItem","EMPTY_OBJECT","parse","destroy","Split","direction","cursor","style","display","height","width","padding","div","ref","Delimiter","COLON","SEMICOLON","COMMA","HYPHEN","SPACE_HYPHEN_SPACE","UNDERSCORE","SPACE","EMPTY","PIPE","SLASH","EQUALS","AMPERSAND","PLUS","EXCLAMATION_MARK","QUESTION_MARK","OPEN_PARENTHESIS","CLOSE_PARENTHESIS","OPEN_BRACE","CLOSE_BRACE","NEW_LINE"],"sourceRoot":"","ignoreList":[0,1,2,3,6,7,8]}